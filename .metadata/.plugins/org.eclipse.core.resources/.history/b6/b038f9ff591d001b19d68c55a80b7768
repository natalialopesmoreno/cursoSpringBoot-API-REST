package br.com.alura.forum.controller;

import java.net.URI;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriBuilder;
import org.springframework.web.util.UriComponentsBuilder;

import br.com.alura.forum.controller.dto.DetalhesDoTopicoDTO;
import br.com.alura.forum.controller.dto.TopicosDTO;
import br.com.alura.forum.controller.form.AtualizacaoTopicoForm;
import br.com.alura.forum.controller.form.TopicoForm;
import br.com.alura.forum.modelo.Topico;
import br.com.alura.forum.repository.CursoRepository;
import br.com.alura.forum.repository.TopicoRepository;

@RestController
@RequestMapping("/topicos")
public class TopicosController 
{
	
	@Autowired
	private TopicoRepository repository ;
	
	@Autowired
	private CursoRepository cursoRepository ;
	
	@GetMapping
	public List<TopicosDTO> lista(String nomeCurso)
	{
		if(nomeCurso==null) 
		{
			List<Topico> topicos = repository.findAll();
			return TopicosDTO.converter(topicos);
		} else 
		{
			List<Topico> topicos = repository.findByCursoNome(nomeCurso);
			return TopicosDTO.converter(topicos);
		}
	}
	
	@PostMapping
	public ResponseEntity<TopicosDTO> cadastrar(@RequestBody @Valid TopicoForm form, UriComponentsBuilder uriBuilder) 
	{
		Topico topico = form.converter(cursoRepository);
		repository.save(topico);
		URI uri = uriBuilder.path("/topicos/{id}").buildAndExpand(topico.getId()).toUri();	
		return ResponseEntity.created(uri).body(new TopicosDTO(topico));
	}
	
	
	@GetMapping("/{id}")
	public DetalhesDoTopicoDTO detalhar (@PathVariable Long id) 
	{
		Topico topico = repository.getOne(id);
		return new DetalhesDoTopicoDTO(topico);
		
	}
	
	@PutMapping("/{id}")
	public ResponseEntity<TopicosDTO> atualizar(@PathVariable Long id, @RequestBody @Valid AtualizacaoTopicoForm form)
	{
		Topico topico = form.atualizar(id, repository);
		return
	}
	
}
